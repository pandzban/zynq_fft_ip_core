#include "FFT_Butterfly_Axi_Lite.h"
#include "xparameters.h"
#include "xil_io.h"
#include "xil_printf.h"
#include <stdio.h>

#define FFT_BUTTERFLY_AXI_LITE_S00_AXI_SLV_REG0_OFFSET 0
#define FFT_BUTTERFLY_AXI_LITE_S00_AXI_SLV_REG1_OFFSET 4
#define FFT_BUTTERFLY_AXI_LITE_S00_AXI_SLV_REG2_OFFSET 8
#define FFT_BUTTERFLY_AXI_LITE_S00_AXI_SLV_REG3_OFFSET 12
#define FFT_BUTTERFLY_AXI_LITE_S00_AXI_BASE_ADRESS 0x43C00000


void printDecimalFXPVal(s32 val, u32 scale, u8 nbr_of_decimal_digit ){
u32 i;
	//Change radix 2 to radix 10 fixed-point. Spare one more decimal point for rounding
	for( i=0; i<nbr_of_decimal_digit+1; i++ ) val=val*10; //Multiply by 10^nbr_of_decimal_digit+1
	val /= (s32) scale;
	//Round target fixed-point to nearst integer
	val = (val +5 )/10;

	xil_printf("%dE-%u", val, nbr_of_decimal_digit );
}


int main()
{
	u32 result;
	int16_t Data_Input[16] = {1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0};
	int32_t Data_Output[16];
	int32_t val;
	print("\n");
	print("start!\n");
	for (int i=0; i <= 15; i++){
		val = Data_Input[i];
		//printDecimalFXPVal(1, 1024, 10);
		xil_printf("%d", 1 );
		print("\n");
	}
	FFT_BUTTERFLY_AXI_LITE_mWriteReg(FFT_BUTTERFLY_AXI_LITE_S00_AXI_BASE_ADRESS,FFT_BUTTERFLY_AXI_LITE_S00_AXI_SLV_REG2_OFFSET,1);
	for(int i=0;i <= 15; i++){
		FFT_BUTTERFLY_AXI_LITE_mWriteReg(FFT_BUTTERFLY_AXI_LITE_S00_AXI_BASE_ADRESS,FFT_BUTTERFLY_AXI_LITE_S00_AXI_SLV_REG0_OFFSET,Data_Input[i]);
	}
	FFT_BUTTERFLY_AXI_LITE_mWriteReg(FFT_BUTTERFLY_AXI_LITE_S00_AXI_BASE_ADRESS,FFT_BUTTERFLY_AXI_LITE_S00_AXI_SLV_REG2_OFFSET,0);
	for(int i=0; i <= 15;i++){
		Data_Output[i] = FFT_BUTTERFLY_AXI_LITE_mReadReg(FFT_BUTTERFLY_AXI_LITE_S00_AXI_BASE_ADRESS, FFT_BUTTERFLY_AXI_LITE_S00_AXI_SLV_REG1_OFFSET);
	}
	print("\n");
	print("\n");
	for (int i=0; i <= 15; i++){
		val = Data_Output[i];
		printDecimalFXPVal(val, 1024, 10);
	}
}
